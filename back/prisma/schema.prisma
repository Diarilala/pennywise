// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  categories Category[]
  expenses   Expense[]
  incomes    Income[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  description String?
  user_id   Int
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expenses  Expense[]
  incomes   Income[]
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime
  category_id Int
  user_id     Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  receipts    Receipt[]
}

model Income {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime
  category_id Int
  user_id     Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Receipt {
  id           Int      @id @default(autoincrement())
  file_path    String
  uploaded_at  DateTime @default(now())
  expense_id   Int
  expense      Expense  @relation(fields: [expense_id], references: [id], onDelete: Cascade)
}